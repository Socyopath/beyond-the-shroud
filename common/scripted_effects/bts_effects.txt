# Ship
bts_update_ship_shield_reduction_zroni_shield = {
	if = {
		limit = {
			bts_has_zroni_shield = yes
            NOT = {	has_modifier = bts_zroni_shield_zroni_storm_protection }
			$SYSTEM|fleet.solar_system$ = {
				has_modifier = zroni_storm
			}
		}
		add_modifier = { modifier = bts_zroni_shield_zroni_storm_protection }
	}
	else_if = {
		limit = {
            has_modifier = bts_zroni_shield_zroni_storm_protection
			$SYSTEM|fleet.solar_system$ = {
				NOT = {
					has_modifier = zroni_storm
				}
			}
		}
		remove_modifier = bts_zroni_shield_zroni_storm_protection
	}
	else = {
		
	}
}

bts_arcology_swap_planet = {
	[[CITY]
	export_trigger_value_to_variable = {
		trigger = num_districts
		parameters = {
			type = $CITY$
		}
		variable = num_housing_districts
	}]
	[[ARM_INDUSTRIAL]
	export_trigger_value_to_variable = {
		trigger = num_districts
		parameters = {
			type = $ARM_INDUSTRIAL$
		}
		variable = num_arm_industrial_districts
	}]
	[[CIV_INDUSTRIAL]
	export_trigger_value_to_variable = {
		trigger = num_districts
		parameters = {
			type = $CIV_INDUSTRIAL$
		}
		variable = num_civ_industrial_districts
	}]
	
	change_pc = pc_bts_arcology_psionic
	add_deposit = d_hab_zro_5

	[[CITY]
	while = {
		count = num_housing_districts
		add_district = bts_district_housing_arcology_psionic
	}
	clear_variable = num_housing_districts
	]

	[[ARM_INDUSTRIAL]
	while = {
		count = num_arm_industrial_districts
		add_district = bts_district_arms_industry_arcology_psionic
	}
	clear_variable = num_arm_industrial_districts
	]

	[[CIV_INDUSTRIAL]
	while = {
		count = num_civ_industrial_districts
		add_district = bts_district_civilian_industry_arcology_psionic
	}
	clear_variable = num_civ_industrial_districts
	]
}

# Scope : Planet
bts_create_concept_ship = {
	create_fleet = {
		name = $NAME$
		effect = {
			set_owner = $OWNER$
			create_ship = {
				name = "NAME_Conceptual_Ship"
				design = "NAME_From_Beyond_Ship"
				graphical_culture = "extra_dimensional_01"
				prefix = no
				upgradable = no
				effect = {
					set_ship_flag = $FLAG$
					add_modifier = { modifier = bts_conceptual_ship }
				}
			}
			set_location = $LOC$
		}
	}
}

bts_add_spec_point = {
	change_variable = {
		which = bts_spec_point
		value = 1
	}
}

bts_remove_spec_point = {
	subtract_variable  = {
		which = bts_spec_point
		value = 1
	}
}

# Scope = System
bts_spawn_conceptual_system_effect = {
	create_ambient_object = {
		type = "bts_psionic_wave"
		location = this
		play_animation_once = yes
	}
	last_created_ambient_object = {
		set_location = {
			target = prev
			distance = 0
			angle = random
		}
	}
	create_ambient_object = {
		type = "bts_conceptual_system_effect"
		location = this
		[[DAYS] duration = $DAYS$ ]
	}
	last_created_ambient_object = {
		set_location = {
			target = prev
			distance = 0
			angle = random
		}
	}
}

# Scope = Country
bts_conceptual_effect_cooldown_start = {
	add_modifier = {
		modifier = bts_conceptual_effect_cooldown
		days = @bts_conceptual_effect_$CONCEPT$_cooldown
		multiplier = value:scripted_modifier_mult|MODIFIER|bts_conceptual_effect_cost_mult|
		time_multiplier = value:scripted_modifier_mult|MODIFIER|bts_conceptual_effect_cooldown_mult|
	}
}

bts_summon_power = {
	random_owned_planet = {
		limit = {
			is_planet_class = pc_bts_labyrinth_of_abstraction
		}
		save_event_target_as = bts_labyrinth_summon_target
	}
	create_fleet = {
		name = $FLEET_NAME$
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = root
			create_ship = {
				name = $SHIP_NAME$
				design = $SHIP_DESIGN$
			}
			if = {
				limit = { 
					event_target:bts_labyrinth_summon_target = { 
						has_building = bts_building_labyrinth_reality_reapers_zroni 
					} 
				}
				last_created_ship = {
					set_ship_design = {
						design = $SHIP_DESIGN_ZRONI$
					}
					bts_update_ship_shield_reduction_zroni_shield = { SYSTEM = event_target:bts_labyrinth_summon_target.solar_system }
				}
			}
			set_location = event_target:bts_labyrinth_summon_target
		}
	}
}