# Psionic Auras
# -----------------------
#	patron = <patron_type>				# Key of the Psionic Patron of this Aura type (optional)
#	background = "GFX_X"				# Will also require "GFX_X_header"
#										# If not defined, this aura will not automatically appear throught Covenant, but it can still be spawned via script
# 	on_start = {}						# Effects when the Aura is created
# 	on_gain_level = {}					# Effects when Aura's intensity gains a level
# 	on_progress_complete = {}			# Effects when Aura's intensity has reached its maximum value (depends on intensity levels, overrides on_gain_level)
# 	on_vanish = {}						# Effects when Aura's intensity is below 0 (called when Psionic Aura is destroyed, so it doesn't support randomness)
# 	on_monthly = {}						# Effects executed monthly after every aura has updated its progress
#
# 	triggered_system_modifier = {}		# Triggered modifier applying to every system affected by the aura (scope = system)
#								Additionally these common modifiers, are implemented triggered modifiers to fleets and planets
#								automatically depending on their owner and its relation with the aura owner
#	owner_fleet_modifier = {}			# Triggered modifier applying to fleets owned by the aura owner affected by the aura (scope = fleet)
#	rival_fleet_modifier = {}			# Triggered modifier applying to fleets owned by empires hostile to the aura owner (rivals or at war with) affected by the aura (scope = fleet)
#	neutral_fleet_modifier = {}			# Triggered modifier applying to every other fleets affected by the aura (scope = fleet)
#	owner_planet_modifier = {}			# Triggered modifier applying to planets owned by the aura owner affected by the aura (scope = planet)
#	rival_planet_modifier = {}			# Triggered modifier applying to planets owned by empires hostile to the aura owner (rivals or at war with) affected by the aura (scope = planet)
#	neutral_planet_modifier = {}		# Triggered modifier applying to every other planets affected by the aura (scope = planet)
#
#	Note on scopes used by triggers: every scope has a FROM scope which corresponds to the aura owner
#
# -----------------------
# Each Aura has an associated Intensity value from 0 to the completion value (generated by the end of the final intensity level).
# Intensity is divided in one or more levels. Each level can have different modifiers associated with it.
#
# intensity_level = {					# Use this keyword to list all intensity levels, in the correct order. You need at least one.
# 		end = 40						# Where the level ends and the next one starts.
#										# Determines the end value of the Intensity and triggers on_progress_complete, if it is the final level.
# 		on_enter_level = {}				# Effects when we enter this level
# 		triggered_system_modifier = {}	# Triggered modifier applying to the current system (only during this level) (scope = current system)
#									Additionally these common modifiers, are implemented triggered modifiers to fleets and planets
#									automatically depending on their owner and its relation with the aura owner
#		owner_fleet_modifier = {}		# Triggered modifier applying to fleets owned by the aura owner in the current system (only during this level) (scope = fleet)
#		rival_fleet_modifier = {}		# Triggered modifier applying to fleets owned by empires hostile to the aura owner (rivals or at war with) in the current system (only during this level) (scope = fleet)
#		neutral_fleet_modifier = {}		# Triggered modifier applying to every other fleets in the current system (only during this level) (scope = fleet)
#		owner_planet_modifier = {}		# Triggered modifier applying to planets owned by the aura owner in the current system (only during this level) (scope = planet)
#		rival_planet_modifier = {}		# Triggered modifier applying to planets owned by empires hostile to the aura owner (rivals or at war with) in the current system (only during this level) (scope = planet)
#		neutral_planet_modifier = {}	# Triggered modifier applying to every other planets in the current system (only during this level) (scope = planet)
# 		custom_tooltip = x				# this will print in the level tooltip
# }
#
# Intensity value can exclusively tick up or down. Down ticks can be calculated daily or monthly, while up ticks are calculated monthly.
# Each scripted value is preceded by a trigger for optimization purposes. Triggers must be true before calculating scripted values.
# Intensity can't grow if its intensity is ticking down. Hence, down tick is calculated first, and if its value > 0, increase isn't calculated.
#
# daily_decrease = {
# 	base = 0							# default progress
# 	modifier = { 						# Standard weight fields, you can do everything that common/script_values/00_script_values.txt tells you about
# 		add = 2
# 		desc = federation_acceptance_reduce_fleet 	# Do not forget to add loc tooltips (the game will scream at you otherwise)
# 		<triggers>
# 	}
# }
#
# increase_trigger = {
# 	<triggers>
# }
# monthly_increase = {
# 	base = 1							# default monthly progress
# 	modifier = { 						# Standard weight fields, you can do everything that common/script_values/00_script_values.txt tells you about
# 		add = 2
# 		desc = federation_acceptance_reduce_fleet 	# Do not forget to add loc tooltips (the game will scream at you otherwise)
# 		<triggers>
# 	}
# }
#
# aura_galaxy_texture = "texture"		# Textures used for galaxy view (star and hyperlane)
# aura_hyperlane_texture = "texture"
#

bts_patron_aura = {
	patron = bts_patron
	background = "GFX_aura_bts_patron"

	intensity_level = {
		end = 1000
		owner_fleet_modifier = {
			modifier = {
				ship_ftl_jumpdrive_range_mult = @bts_patron_aura_1_jumpdrive_range_mult_owner
				ship_windup_mult = @bts_patron_aura_1_hyper_jump_charge_time_mult_owner
				ship_winddown_mult = @bts_patron_aura_1_hyper_jump_cooldown_mult_owner
			}
		}
		neutral_fleet_modifier = {
			modifier = {
				ship_ftl_jumpdrive_range_mult = @bts_patron_aura_1_jumpdrive_range_mult_neutral
				ship_windup_mult = @bts_patron_aura_1_hyper_jump_charge_time_mult_neutral
				ship_winddown_mult = @bts_patron_aura_1_hyper_jump_cooldown_mult_neutral
			}
		}
		rival_fleet_modifier = {
			modifier = {
				ship_ftl_jumpdrive_range_mult = @bts_patron_aura_1_jumpdrive_range_mult_rival
				ship_windup_mult = @bts_patron_aura_1_hyper_jump_charge_time_mult_rival
				ship_winddown_mult = @bts_patron_aura_1_hyper_jump_cooldown_mult_rival
			}
		}
	}
	intensity_level = {
		end = 2000
		owner_fleet_modifier = {
			modifier = {
				ship_ftl_jumpdrive_range_mult = @bts_patron_aura_2_jumpdrive_range_mult_owner
				ship_windup_mult = @bts_patron_aura_2_hyper_jump_charge_time_mult_owner
				ship_winddown_mult = @bts_patron_aura_2_hyper_jump_cooldown_mult_owner
			}
		}
		neutral_fleet_modifier = {
			modifier = {
				ship_ftl_jumpdrive_range_mult = @bts_patron_aura_2_jumpdrive_range_mult_neutral
				ship_windup_mult = @bts_patron_aura_2_hyper_jump_charge_time_mult_neutral
				ship_winddown_mult = @bts_patron_aura_2_hyper_jump_cooldown_mult_neutral
			}
		}
		rival_fleet_modifier = {
			modifier = {
				ship_ftl_jumpdrive_range_mult = @bts_patron_aura_2_jumpdrive_range_mult_rival
				ship_windup_mult = @bts_patron_aura_2_hyper_jump_charge_time_mult_rival
				ship_winddown_mult = @bts_patron_aura_2_hyper_jump_cooldown_mult_rival
			}
		}
	}
	intensity_level = {
		end = 2500
		owner_fleet_modifier = {
			modifier = {
				ship_ftl_jumpdrive_range_mult = @bts_patron_aura_3_jumpdrive_range_mult_owner
				ship_windup_mult = @bts_patron_aura_3_hyper_jump_charge_time_mult_owner
				ship_winddown_mult = @bts_patron_aura_3_hyper_jump_cooldown_mult_owner
			}
		}
		neutral_fleet_modifier = {
			modifier = {
				ship_ftl_jumpdrive_range_mult = @bts_patron_aura_3_jumpdrive_range_mult_neutral
				ship_windup_mult = @bts_patron_aura_3_hyper_jump_charge_time_mult_neutral
				ship_winddown_mult = @bts_patron_aura_3_hyper_jump_cooldown_mult_neutral
			}
		}
		rival_fleet_modifier = {
			modifier = {
				ship_ftl_jumpdrive_range_mult = @bts_patron_aura_3_jumpdrive_range_mult_rival
				ship_windup_mult = @bts_patron_aura_3_hyper_jump_charge_time_mult_rival
				ship_winddown_mult = @bts_patron_aura_3_hyper_jump_cooldown_mult_rival
			}
		}
	}

	inline_script = {
		script = shroud/psionic_aura_definition
		TYPE = bts_patron_aura
	}

	aura_galaxy_texture = "gfx/map/psionic_auras/whisperers_aura.dds"
	aura_hyperlane_texture = "gfx/map/psionic_auras/whisperers_aura_hyperlane.dds"
}


