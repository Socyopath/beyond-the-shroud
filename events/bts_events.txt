namespace = bts

# Trigger psionic wave pulse on enter battle
country_event = {
	id = bts.12
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		fromfrom.solar_system  = {
			exists = starbase
			starbase = {
				has_starbase_building = bts_shroud_destabilizer
			}
		}
	}
    immediate = {
		fromfrom.solar_system.starbase = {
			starbase_event = { id = bts.13 }
		}
    }
}

# Psionic wave pulse
starbase_event = {
	id = bts.13
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		fleet = {
			solar_system = {
				every_system_ambient_object = {
					limit = { has_ambient_object_flag = bts_psionic_wave_starbase_module }
					destroy_ambient_object = this
				}
			}
			if = {
				limit = { is_in_combat = yes }
				create_ambient_object = {
					type = "bts_psionic_wave"
					location = this
					play_animation_once = yes
				}
				last_created_ambient_object = {
					set_ambient_object_flag = bts_psionic_wave_starbase_module
					set_location = {
						target = prev
						distance = 0
						angle = random
					}
				}
				root = {
					starbase_event = { id = bts.13 days = 10 }
				}
			}
		}
	}
}


# Megastructure Info event
country_event = { 
	id = bts.300
	title = bts_mega_aetherophasic_collapser_unlocked
	picture = GFX_evt_unspeakable_horror
	show_sound = event_red_alert
	location = root

	fire_only_once = yes
	is_triggered_only = yes

	desc = bts_mega_aetherophasic_collapser_unlocked_desc

	trigger = {
		bts_has_any_covenant_confirmed = yes
		bts_has_any_covenant_favor = { FAVOR_AMOUNT = @bts_mega_aetherophasic_collapser_0_favor_cost }
	}

	option = {
		name = OK
		hidden_effect = {
			set_country_flag = bts_can_build_aetherophasic_collapser
		}
	}
}

# BTS covenant powers
country_event = {
	id = bts.301
	title = "utopia.3000.name"
	desc = "utopia.3170.desc"
	diplomatic = yes
	diplomatic_title = BLANK_STRING
	force_open = yes

	picture_event_data = {
		portrait = shroud1
		room = shroud_room
	}

	is_triggered_only = yes

	immediate = {
		set_country_flag = shroud_diplomacy_engaged
	}

	after = {
		hidden_effect = {
			remove_country_flag = shroud_diplomacy_engaged
		}
	}

    inline_script = {
        script = bts_shroud_power_option
        NAME = bts_power_summon_1
        ALLOW = "bts_can_use_power_summon_1 = yes"
        RESOURCE = sr_zro
		USE_COST = @bts_power_summon_1_zro_cost
		RESOURCE_2 = astral_threads
		USE_COST_2 = @bts_power_summon_1_astral_threads_cost
        SHROUD_DELVE_COOLDOWN = @bts_power_summon_1_shroud_delve_cooldown
        EVENT_ID = bts.310
    }

    inline_script = {
        script = bts_shroud_power_option
        NAME = bts_power_summon_2
        ALLOW = "bts_can_use_power_summon_2 = yes"
        RESOURCE = sr_zro
		USE_COST = @bts_power_summon_2_zro_cost
		RESOURCE_2 = astral_threads
		USE_COST_2 = @bts_power_summon_2_astral_threads_cost
        SHROUD_DELVE_COOLDOWN = @bts_power_summon_2_shroud_delve_cooldown
        EVENT_ID = bts.320
    }

    inline_script = {
        script = bts_shroud_power_option
        NAME = bts_power_summon_3
        ALLOW = "bts_can_use_power_summon_3 = yes"
        RESOURCE = sr_zro
		USE_COST = @bts_power_summon_3_zro_cost
		RESOURCE_2 = astral_threads
		USE_COST_2 = @bts_power_summon_3_astral_threads_cost
        SHROUD_DELVE_COOLDOWN = @bts_power_summon_3_shroud_delve_cooldown
        EVENT_ID = bts.330
    }

    inline_script = {
        script = bts_shroud_power_option
        NAME = bts_power_summon_4
        ALLOW = "bts_can_use_power_summon_4 = yes custom_tooltip = { fail_text = bts_power_summon_4_already_in_use NOT = { any_owned_ship = { is_ship_size = warped_consciousness } } }"
        RESOURCE = sr_zro
		USE_COST = @bts_power_summon_4_zro_cost
		RESOURCE_2 = astral_threads
		USE_COST_2 = @bts_power_summon_4_astral_threads_cost
        SHROUD_DELVE_COOLDOWN = @bts_power_summon_4_shroud_delve_cooldown
        EVENT_ID = bts.340
    }

	option = {
		name = "exit.shroud"
		custom_tooltip = "exit.shroud.tooltip"
		default_hide_option = yes
	}
}


country_event = {
	id = bts.310
    hide_window = yes
	is_triggered_only = yes

    immediate = {
		bts_summon_power = {
			FLEET_NAME = "NAME_Psionic_Avatar"
			SHIP_NAME = "NAME_Psionic_Avatar"
			SHIP_DESIGN = "bts_shroud_avatar"
			SHIP_DESIGN_ZRONI = "bts_shroud_avatar_zroni"
		}
    }
}

country_event = {
	id = bts.320
    hide_window = yes
	is_triggered_only = yes

    immediate = {
		bts_summon_power = {
			FLEET_NAME = "NAME_Shroud_Manifestation"
			SHIP_NAME = "NAME_Shroud_Manifestation"
			SHIP_DESIGN = "bts_shroud_manifestation"
			SHIP_DESIGN_ZRONI = "bts_shroud_manifestation_zroni"
		}
    }
}

country_event = {
	id = bts.330
    hide_window = yes
	is_triggered_only = yes

    immediate = {
		bts_summon_power = {
			FLEET_NAME = "NAME_Dimensional_Horror"
			SHIP_NAME = "NAME_Dimensional_Horror"
			SHIP_DESIGN = "bts_dimensional_horror"
			SHIP_DESIGN_ZRONI = "bts_dimensional_horror_zroni"
		}
    }
}

country_event = {
	id = bts.340
    hide_window = yes
	is_triggered_only = yes

    immediate = {
		bts_summon_power = {
			FLEET_NAME = "NAME_The_End"
			SHIP_NAME = "NAME_Reckoning"
			SHIP_DESIGN = "bts_warped_consciousness"
			SHIP_DESIGN_ZRONI = "bts_warped_consciousness_zroni"
		}
		last_created_ship = {
			ship_event = { id = bts.343 } # Update modifiers
		}
		set_variable = {
			which = "bts_planet_killer_end_pop_killed"
			value = 0
		}
    }
}


# God Ray
planet_event = {
	id = bts.341
	hide_window = yes

	is_triggered_only = yes

    trigger = {
        from = {
            any_owned_ship = {
                is_ship_size = warped_consciousness
            }
        }
    }

	immediate = {
        # Non robot planet : SUCCESS
		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
				exists = owner
				owner = { NOT = { is_same_value = from.owner } }
			}
			from.owner = {
				country_event = { id = bts.342 }
			}
		}

		# Contingency Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				NOT = { has_planet_flag = machine_lair }
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_godrayed
			planet_event = { id = crisis.2040 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		# Contingency Final Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				has_planet_flag = machine_lair
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_godrayed
			from.owner = { save_event_target_as = final_machine_world_destroyer }
			stop_crisis_sound = yes
			planet_event = { id = crisis.2046 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

        # Robots pops
		every_owned_pop = {
			limit = {
				OR = {
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
					has_trait = trait_hive_mind
					has_living_standard = { # Bio-trophies die without care
						country = root.owner
						type = living_standard_organic_trophy
					}
				}
			}
			kill_pop = yes
			from.owner = {
				if = {
					limit = { has_ascension_perk = ap_become_the_crisis }
					complete_crisis_objective = crisobj_purge_pops
				}
			}
		}

        # Organic pops
		every_owned_pop = {
			limit = {
				NOR = {
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
					has_trait = trait_hive_mind
					has_living_standard = {
						country = root.owner
						type = living_standard_organic_trophy
					}
				}
			}

            from.owner = {
                change_variable = {
                    which = "bts_planet_killer_end_pop_killed"
                    value = 1
                }
            }
            kill_pop = yes
            from.owner = {
				if = {
					limit = { has_ascension_perk = ap_become_the_crisis }
					complete_crisis_objective = crisobj_purge_pops
				}
			}
		}
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_planet_class = pc_habitat
			}
			spawn_habitat_divine_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_ringworld_habitable
			}
			spawn_ringworld_divine_effect = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_habitat
					is_planet_class = pc_ringworld_habitable
				}
			}
			# nothing
		}
		else = {
			change_pc = this
		}

		from = {
			random_owned_ship = {
				limit = {
					is_ship_size = warped_consciousness
				}
				ship_event = { id = bts.343 }
			}
		}
	}
}

country_event = {
	id = bts.342
	title = bts_planet_destruction_name
	desc = bts_planet_destruction_desc
	picture = GFX_evt_planet_beam
	show_sound = event_mystic_reveal
	location = from

	is_triggered_only = yes

	option = {
		name = OK
		from = {
			custom_tooltip = bts_planet_destruction_tooltip
		}
	}
}

# Updated Reckoning modifier
ship_event = {
	id = bts.343
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		remove_modifier = absorbed_consciousness_0
        remove_modifier = absorbed_consciousness_1
        remove_modifier = absorbed_consciousness_2
        remove_modifier = absorbed_consciousness_3
        remove_modifier = absorbed_consciousness_4
        remove_modifier = absorbed_consciousness_5
        if = {
        	limit = {
        		owner = {
        			check_variable = {
        				which = "bts_planet_killer_end_pop_killed"
        				value < 250
        			}
        		}
        	}
        	add_modifier = {
        		modifier = "absorbed_consciousness_0"
        		days = -1
        	}
		}
		else_if = {
        	limit = {
        		owner = {
        			check_variable = {
        				which = "bts_planet_killer_end_pop_killed"
        				value < 500
        			}
        		}
        	}
        	add_modifier = {
        		modifier = "absorbed_consciousness_1"
        		days = -1
        	}
        }
        else_if = {
        	limit = {
        		owner = {
        			check_variable = {
        				which = "bts_planet_killer_end_pop_killed"
        				value < 1000
        			}
        		}
        	}
        	add_modifier = {
        		modifier = "absorbed_consciousness_2"
        		days = -1
        	}
        }
        else_if = {
        	limit = {
        		owner = {
        			check_variable = {
        				which = "bts_planet_killer_end_pop_killed"
        				value < 2500
        			}
        		}
        	}
        	add_modifier = {
        		modifier = "absorbed_consciousness_3"
        		days = -1
        	}
        }
        else_if = {
        	limit = {
        		owner = {
        			check_variable = {
        				which = "bts_planet_killer_end_pop_killed"
        				value < 5000
        			}
        		}
        	}
        	add_modifier = {
        		modifier = "absorbed_consciousness_4"
        		days = -1
        	}
        }
        else = {
        	add_modifier = {
        		modifier = "absorbed_consciousness_5"
        		days = -1
        	}
        }
    }
}

# Spawn temporary shroud portal to every fleets
country_event = {
	id = bts.400
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		every_system = {
			limit = {
				any_ship_in_system = {
					is_owned_by = root
					is_ship_class = shipclass_military
				}
			}
			random_ship_in_system = {
				limit = {
					is_owned_by = root
					is_ship_class = shipclass_military
				}
				save_event_target_as = bts_temp_shroud_portal_target
			}

			spawn_megastructure = {
				type = bts_shroud_portal_megastructure
				owner = root
				coords_from = event_target:bts_temp_shroud_portal_target
				orbit_angle = 0
				orbit_distance = 0
				init_effect = {
					set_megastructure_flag = bts_shroud_portal_megastructure_temp_of@root
				}
			}
		}
		country_event = {
			id = bts.401
			days = @bts_shroud_portal_expiration_days
		}
	}
}

# Remove all temporary shroud portals
country_event = {
	id = bts.401
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		every_megastructure = {
			limit = { 
				has_megastructure_flag = bts_shroud_portal_megastructure_temp_of@root
			}
			remove_megastructure = this
		}
	}
}

# Captial Upgrade - Gives relic
planet_event = {
	id = bts.402
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_planet_class = pc_bts_labyrinth_of_abstraction
		exists = owner
		check_variable_arithmetic = {
            which = owner.value:bts_labyrinth_of_abstraction_level
            value >= @bts_labyrinth_of_abstraction_relic_level
        }
	}

	immediate = {
		owner = { add_relic = r_bts_relic_shroud_nexus } 
	}
}