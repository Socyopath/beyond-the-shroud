namespace = bts

# BTS covenant powers
# From : Labyrinth Of Abstraction
country_event = {
	id = bts.400
	title = "utopia.3000.name"
	desc = "utopia.3190.desc"
	diplomatic = yes
	diplomatic_title = BLANK_STRING
	force_open = yes

	picture_event_data = {
		portrait = shroud1
		room = shroud_room
	}

	is_triggered_only = yes

	immediate = {
		set_country_flag = shroud_diplomacy_engaged
	}

	after = {
		hidden_effect = {
			remove_country_flag = shroud_diplomacy_engaged
		}
	}

    option = {
        name = bts_power_summon_1
        custom_tooltip = bts_power_summon_1_desc
        trigger = {
            
        }
        allow = {
            resource_stockpile_compare = {
                resource = sr_zro
                value >= 1000
                mult = value:scripted_modifier_mult|MODIFIER|bts_power_cost_mult|
            }
        }

		if = { 
			limit = { 
				check_variable_arithmetic = {
					which = from.value:bts_num_jobs|JOB|bts_reality_reaper|
					value > 0
				}
			}
			tooltip = {
				add_modifier = {
					modifier = bts_job_reality_reaper_summon_boost
					multiplier = from.value:bts_num_jobs|JOB|bts_reality_reaper|
				}
			}
		}
		
        add_resource = {
            sr_zro = -1000
            mult = value:scripted_modifier_mult|MODIFIER|bts_power_cost_mult|
        }
        
        add_modifier = {
            modifier = "shroud_cooldown"
            days = @bts_power_summon_1_shroud_delve_cooldown
            time_multiplier = value:scripted_modifier_mult|MODIFIER|shroud_delve_cooldown|
        }

        hidden_effect = {
            country_event = { id = bts.410 }
        }
    }

    option = {
        name = bts_power_summon_2
        custom_tooltip = bts_power_summon_2_desc
        trigger = {

        }
        allow = {
            custom_tooltip = { 
                fail_text = bts_power_summon_2_invalid_number 
                count_owned_ship = { 
                    count < root.value:bts_scripted_modifier_add|BASE|@bts_power_summon_2_max_number|MODIFIER|bts_power_summon_2_capacity_add|
                    limit = { is_ship_size = shroud_manifestation }
                } 
            }
            resource_stockpile_compare = {
                resource = sr_zro
                value >= 2000
                mult = value:scripted_modifier_mult|MODIFIER|bts_power_cost_mult|
            }
        }

		if = { 
			limit = { 
				check_variable_arithmetic = {
					which = from.value:bts_num_jobs|JOB|bts_reality_reaper|
					value > 0
				}
			}
			tooltip = {
				add_modifier = {
					modifier = bts_job_reality_reaper_summon_boost
					multiplier = from.value:bts_num_jobs|JOB|bts_reality_reaper|
				}
			}
		}

        add_resource = {
            sr_zro = -2000
            mult = value:scripted_modifier_mult|MODIFIER|bts_power_cost_mult|
        }
        
        add_modifier = {
            modifier = "shroud_cooldown"
            days = @bts_power_summon_2_shroud_delve_cooldown
            time_multiplier = value:scripted_modifier_mult|MODIFIER|shroud_delve_cooldown|
        }

        hidden_effect = {
            country_event = { id = bts.420 }
        }
    }

    option = {
        name = bts_power_summon_3
        custom_tooltip = bts_power_summon_3_desc
        trigger = {
            has_technology = bts_tech_labyrinth_summon_upgrade
        }
        allow = {
            custom_tooltip = { 
                fail_text = bts_power_summon_3_invalid_number 
                count_owned_ship = { 
                    count < 1
                    limit = { is_ship_size = warped_consciousness }
                } 
            }
            resource_stockpile_compare = {
                resource = sr_zro
                value >= 20000
                mult = value:scripted_modifier_mult|MODIFIER|bts_power_cost_mult|
            }
        }

		if = { 
			limit = { 
				check_variable_arithmetic = {
					which = from.value:bts_num_jobs|JOB|bts_reality_reaper|
					value > 0
				}
			}
			tooltip = {
				add_modifier = {
					modifier = bts_job_reality_reaper_summon_boost
					multiplier = from.value:bts_num_jobs|JOB|bts_reality_reaper|
				}
			}
		}
		
        add_resource = {
            sr_zro = -20000
            mult = value:scripted_modifier_mult|MODIFIER|bts_power_cost_mult|
        }
        
        add_modifier = {
            modifier = "shroud_cooldown"
            days = @bts_power_summon_3_shroud_delve_cooldown
            time_multiplier = value:scripted_modifier_mult|MODIFIER|shroud_delve_cooldown|
        }

        hidden_effect = {
            country_event = { id = bts.430 }
        }
    }

	option = {
		name = "exit.shroud"
		custom_tooltip = "exit.shroud.tooltip"
		default_hide_option = yes
	}
}


country_event = {
	id = bts.410
    hide_window = yes
	is_triggered_only = yes

    immediate = {
		bts_summon_power = {
			FLEET_NAME = "NAME_Psionic_Avatar"
			SHIP_NAME = "NAME_Psionic_Avatar"
			SHIP_DESIGN = "bts_shroud_avatar"
			SHIP_DESIGN_ZRONI = "bts_shroud_avatar_zroni"
		}
    }
}

country_event = {
	id = bts.420
    hide_window = yes
	is_triggered_only = yes

    immediate = {
		bts_summon_power = {
			FLEET_NAME = "NAME_Shroud_Manifestation"
			SHIP_NAME = "NAME_Shroud_Manifestation"
			SHIP_DESIGN = "bts_shroud_manifestation"
			SHIP_DESIGN_ZRONI = "bts_shroud_manifestation_zroni"
		}
    }
}


country_event = {
	id = bts.430
    hide_window = yes
	is_triggered_only = yes

    immediate = {
		bts_summon_power = {
			FLEET_NAME = "NAME_The_End"
			SHIP_NAME = "NAME_Reckoning"
			SHIP_DESIGN = "bts_warped_consciousness"
			SHIP_DESIGN_ZRONI = "bts_warped_consciousness_zroni"
		}
		last_created_ship = {
			ship_event = { id = bts.433 } # Update modifiers
		}
		set_variable = {
			which = "bts_planet_killer_end_pop_killed"
			value = 0
		}
    }
}


# God Ray
planet_event = {
	id = bts.431
	hide_window = yes

	is_triggered_only = yes

    trigger = {
        from = {
            any_owned_ship = {
                is_ship_size = warped_consciousness
            }
        }
    }

	immediate = {
        # Non robot planet : SUCCESS
		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
				exists = owner
				owner = { NOT = { is_same_value = from.owner } }
			}
			from.owner = {
				country_event = { id = bts.432 }
			}
		}

		# Contingency Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				NOT = { has_planet_flag = machine_lair }
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_godrayed
			planet_event = { id = crisis.2040 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		# Contingency Final Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				has_planet_flag = machine_lair
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_godrayed
			from.owner = { save_event_target_as = final_machine_world_destroyer }
			stop_crisis_sound = yes
			planet_event = { id = crisis.2046 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		if = {
			limit = {
				OR = {
					is_active_resolution = "resolution_rulesofwar_independent_tribunals"
					is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
					is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_godray days = 3600 }
			}
		}

        if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by conversion
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						AND = {
							has_federation = yes
							is_in_federation_with = root.owner
						}
						has_ai_personality = awakened_fallen_empire_materialist
						AND = {
							is_country_type = default
							OR = {
								is_materialist = yes
								is_egalitarian = yes
								is_machine_empire = yes
							}
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_converted_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_converted_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
			# Add war exhaustion to planet owner
			owner = {
				if = {
					limit = { #isn't the case when the crisis bombards planets, for instance
						is_at_war_with = from.fleet.owner
					}
					add_static_war_exhaustion = {
						attacker = from.fleet.owner
						location = root
						value_for_planet_destruction = 1.0
					}
				}
			}
		}

        # Robots pops
		every_owned_pop_group = {
			limit = {
				is_robot_pop = yes
			}
            while = {
				count = value:per_100_pop_amount #For every 100 pops iterate through this loop once
				from.owner = {
					if = {
						limit = { has_ascension_perk = ap_become_the_crisis }
						complete_crisis_objective = crisobj_purge_pops
					}
				}
			}
			kill_all_pop = yes
		}

        # Organic pops
		every_owned_pop_group = {
			limit = {
				is_robot_pop = no
			}
            while = {
				count = value:per_100_pop_amount #For every 100 pops iterate through this loop once
				from.owner = {
                    change_variable = {
                        which = "bts_planet_killer_end_pop_killed"
                        value = 1
                    }
					if = {
						limit = { has_ascension_perk = ap_become_the_crisis }
						complete_crisis_objective = crisobj_purge_pops
					}
				}
			}

            set_variable = {
                which = bts_planet_killer_end_pop_killed_tmp
                value = 0
            }

            export_trigger_value_to_variable = {
                trigger = pop_group_size
                variable = bts_planet_killer_end_pop_killed_tmp
            }

            from.owner = {
                change_variable = {
                    which = bts_planet_killer_end_pop_killed
                    value = prev.bts_planet_killer_end_pop_killed_tmp
                }
            }
			kill_all_pop = yes
		}
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_planet_class = pc_habitat
			}
			spawn_habitat_divine_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_cosmogenesis_world
			}
			spawn_lathe_divine_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_ringworld_habitable
			}
			spawn_ringworld_divine_effect = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_habitat
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_cosmogenesis_world
				}
			}
			# nothing
		}
		else = {
			change_pc = this
		}

		from = {
			random_owned_ship = {
				limit = {
					is_ship_size = warped_consciousness
				}
				ship_event = { id = bts.433 }
			}
		}
	}
}

country_event = {
	id = bts.432
	title = bts_planet_destruction_name
	desc = bts_planet_destruction_desc
	picture = GFX_evt_planet_beam
	show_sound = event_mystic_reveal
	location = from

	is_triggered_only = yes

	option = {
		name = OK
		from = {
			custom_tooltip = bts_planet_destruction_tooltip
		}
	}
}

# Updated Reckoning modifier
ship_event = {
	id = bts.433
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		remove_modifier = absorbed_consciousness_0
        remove_modifier = absorbed_consciousness_1
        remove_modifier = absorbed_consciousness_2
        remove_modifier = absorbed_consciousness_3
        remove_modifier = absorbed_consciousness_4
        remove_modifier = absorbed_consciousness_5
        if = {
        	limit = {
        		owner = {
        			check_variable = {
        				which = "bts_planet_killer_end_pop_killed"
        				value < 250
        			}
        		}
        	}
        	add_modifier = {
        		modifier = "absorbed_consciousness_0"
        		days = -1
        	}
		}
		else_if = {
        	limit = {
        		owner = {
        			check_variable = {
        				which = "bts_planet_killer_end_pop_killed"
        				value < 500
        			}
        		}
        	}
        	add_modifier = {
        		modifier = "absorbed_consciousness_1"
        		days = -1
        	}
        }
        else_if = {
        	limit = {
        		owner = {
        			check_variable = {
        				which = "bts_planet_killer_end_pop_killed"
        				value < 1000
        			}
        		}
        	}
        	add_modifier = {
        		modifier = "absorbed_consciousness_2"
        		days = -1
        	}
        }
        else_if = {
        	limit = {
        		owner = {
        			check_variable = {
        				which = "bts_planet_killer_end_pop_killed"
        				value < 2500
        			}
        		}
        	}
        	add_modifier = {
        		modifier = "absorbed_consciousness_3"
        		days = -1
        	}
        }
        else_if = {
        	limit = {
        		owner = {
        			check_variable = {
        				which = "bts_planet_killer_end_pop_killed"
        				value < 5000
        			}
        		}
        	}
        	add_modifier = {
        		modifier = "absorbed_consciousness_4"
        		days = -1
        	}
        }
        else = {
        	add_modifier = {
        		modifier = "absorbed_consciousness_5"
        		days = -1
        	}
        }
    }
}